/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package paint;
//import com.fasterxml.jackson.databind.ObjectMapper;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Point;
import java.io.File;//
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.System.load;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
//import org.json.JSONArray;
//import org.json.JSONException;
//import org.json.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
/**
 *
 * @author Dell
 */
public class Frame extends javax.swing.JFrame implements Node {

    /**
     * Creates new form Frame
     */
 //  DrawingArea e;
    int index = 0;
    ovalwindow cw;
    rectanglewindow rw;
    linewindow lw;
    trianglewindow tw;
    squarewindow sw;
    Node parent;
    //public ArrayList<abs> shapes = new ArrayList<>();
//     int indext = 1;
//     int indexs = 1;
//     int indexr = 1;
//    int indexl = 1;
    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRadioButton1 = new javax.swing.JRadioButton();
        fill = new javax.swing.JButton();
        circle = new javax.swing.JButton();
        rectangle = new javax.swing.JButton();
        ComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        circlebutton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        mydrawingArea = new paint.DrawingArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jRadioButton1.setText("jRadioButton1");

        fill.setText("fill");
        fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillActionPerformed(evt);
            }
        });

        circle.setText("circle");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rectangle.setText("Rectangle");
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleActionPerformed(evt);
            }
        });

        ComboBox.setName(""); // NOI18N
        ComboBox.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                ComboBoxComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ComboBoxComponentShown(evt);
            }
        });
        ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxActionPerformed(evt);
            }
        });

        jButton1.setText("colorize");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("     Select Shape");

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Triangle");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("line");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        circlebutton.setText("Oval");
        circlebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circlebuttonActionPerformed(evt);
            }
        });

        jButton5.setText("Copy");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        mydrawingArea.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout mydrawingAreaLayout = new javax.swing.GroupLayout(mydrawingArea);
        mydrawingArea.setLayout(mydrawingAreaLayout);
        mydrawingAreaLayout.setHorizontalGroup(
            mydrawingAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 651, Short.MAX_VALUE)
        );
        mydrawingAreaLayout.setVerticalGroup(
            mydrawingAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(circlebutton)
                        .addGap(112, 112, 112)
                        .addComponent(jButton4)
                        .addGap(135, 135, 135)
                        .addComponent(rectangle)
                        .addGap(157, 157, 157)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(50, 50, 50)
                        .addComponent(mydrawingArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(circlebutton)
                            .addComponent(jButton4)
                            .addComponent(jButton3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rectangle)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(26, 26, 26)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(mydrawingArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(311, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        // TODO add your handling code here:
          rw= new rectanglewindow (mydrawingArea);
         rw.setSize(1000,900);
         rw.setparentnode(this);
         this.setVisible(false);
         rw.setVisible(true);
        
    }//GEN-LAST:event_rectangleActionPerformed

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
      
    }//GEN-LAST:event_circleActionPerformed

    private void ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ComboBoxActionPerformed
    public void setComboBox(int i)
    {
        ComboBox.setSelectedIndex(i);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       try{
        Shape[] m = ((DrawingArea)mydrawingArea).getShapes();
      
        colorizewindow c1 =new colorizewindow(m[ComboBox.getSelectedIndex()],(DrawingArea)mydrawingArea);//.getSelectedIndex()-1],
        c1.setVisible(true);
       } catch(IndexOutOfBoundsException e)
        {
            JOptionPane.showMessageDialog(null, "choose an element to colorize");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ComboBoxComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ComboBoxComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxComponentHidden

    private void ComboBoxComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ComboBoxComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
          int k = ComboBox.getSelectedIndex();
          Shape shape = mydrawingArea.getShapes()[k];
         mydrawingArea.removeShape(shape);
         ComboBox.removeItemAt(k);
         mydrawingArea.repaint();
          }catch(IndexOutOfBoundsException e)
        {
            JOptionPane.showMessageDialog(null, "choose an element to remove");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void fillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillActionPerformed

    }//GEN-LAST:event_fillActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        tw= new trianglewindow (mydrawingArea);
    
         tw.setSize(1000,900);
         tw.setVisible(true);
         tw.setparentnode(this);
         this.setVisible(false);
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      lw= new linewindow(mydrawingArea);
   

         lw.setSize(1000,900);
         lw.setparentnode(this);
         this.setVisible(false);
         lw.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void circlebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circlebuttonActionPerformed
        // TODO add your handling code here:
         cw = new ovalwindow(mydrawingArea);
         cw.setSize(1000,900);
         cw.setparentnode(this);
         this.setVisible(false);
         cw.setVisible(true);
         

    }//GEN-LAST:event_circlebuttonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
          try{
            
          Shape[] s = mydrawingArea.getShapes();
          int k = ComboBox.getSelectedIndex(); 
          Shape s1=s[k];
          Shape s2=s1.clone();
          if(s2 instanceof Line){
          addComboCanvas(s2,"Line");
          } 
          else if(s2 instanceof Rectangle){
          addComboCanvas(s2,"Rectangle");
          } 
          else if(s2 instanceof Oval){
          addComboCanvas(s2,"Oval");
          }
          else if(s2 instanceof triangle){
          addComboCanvas(s2,"Triangle");
          }
          else{
          addComboCanvas(s2,"Square");
          }
          

          }catch(CloneNotSupportedException e)
        {
            JOptionPane.showMessageDialog(null, "clone not supported");
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
          System.out.println("load");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to load");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileFilter filter = new FileNameExtensionFilter("json file", new String[]{"json"});
        fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToload = fileChooser.getSelectedFile();
            System.out.println("Save as file: " + fileToload.getAbsolutePath());
            try {
                load(fileToload.getAbsolutePath());
            } catch (ParseException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (org.json.simple.parser.ParseException ex) {
                  Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IOException ex) {
                  Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
              }
        }
        

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

 System.out.println("Save");// to check if saved or not
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");//header
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileFilter filter = new FileNameExtensionFilter("json file", new String[]{"json"});
       fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                File fileToSave = fileChooser.getSelectedFile();
                System.out.println("Save as file: " + fileToSave.getAbsolutePath());
                save(fileToSave.getAbsolutePath());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
         
        }
        }
            
            
    }//GEN-LAST:event_jMenuItem1ActionPerformed
public void addComboCanvas(Shape shape,String s){
    ((DrawingArea)mydrawingArea).addShape(shape);
    mydrawingArea.repaint();
    index++;
    ComboBox.addItem(s+ '_'+index);    
}
    /**
     * @param args the command line arguments
     */
//   
  public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }
      public void updateComboIndex(int i){
        ComboBox.setSelectedIndex(i);
    }
         @Override
      public Node getparentnode()
     {
        return parent; 
      }
   @Override
     public void setparentnode(Node parent)
     {
         this.parent=parent;
     }
  private String  extractString(String s)
  {
      return s.substring(15,s.length()-1);
  }
 public void save(String filename) throws FileNotFoundException{
        JSONArray arr = new JSONArray();

        for (abs s : mydrawingArea.shapes) {
            JSONObject obj = new JSONObject();
            if (s instanceof Rectangle) {
                Rectangle r = (Rectangle) s;
                obj.put("shapetype", "rectangle");
                obj.put("x", r.getPosition().x);
                obj.put("y", r.getPosition().y);
                obj.put("width", r.getWidth());
                obj.put("height", r.getHeight());
                obj.put("rgb", r.getColor().getRGB());
                obj.put("rgb2", r.getFillColor().getRGB());
             
            }
            
            else if (s instanceof Line) {
                Line l = (Line) s;
                obj.put("shapetype", "line");
                obj.put("x", l.getPosition().x);
                obj.put("y", l.getPosition().y);
                obj.put("startpoint", l.getEndPoint().x);
                obj.put("Endpoint", l.getEndPoint().y);
                obj.put("rgb", l.getColor().getRGB());
                 
            
            }
            
               else if (s instanceof Oval) {
                Oval r = (Oval) s;
                obj.put("shapetype", "oval");
                obj.put("x", r.getPosition().x);
                obj.put("y", r.getPosition().y);
                obj.put("width", r.getWidth());
                obj.put("height", r.getHeight());
                obj.put("rgb", r.getColor().getRGB());
                obj.put("rgb2", r.getFillColor().getRGB());
               }
        
            else if (s instanceof triangle) {
                triangle t=(triangle)s;
                JSONObject obj2 = new JSONObject(); 
                JSONObject obj3 = new JSONObject();
                JSONObject obj1 = new JSONObject();
                obj.put("shapetype", "triangle");
               
                obj1.put("x",t.getPosition().x+"");
                obj1.put("y",t.getPosition().y+"");
                obj2.put("x",t.getP2().x+"");
                obj2.put("y",t.getP2().y+"");
                obj3.put("x",t.getP3().x+"");
                obj3.put("y",t.getP3().y+"");
                obj.put("point1", obj1);
                obj.put("point2", obj2);
                obj.put("point3", obj3);
                obj.put("rgb", t.getColor().getRGB());
                obj.put("rgb2", t.getFillColor().getRGB());
            
        }
            
             arr.add(obj);
            System.out.println(obj);
        PrintWriter pw = new PrintWriter(new File(filename));

        pw.print(arr);

        pw.close();
        }
    }
 
 private void load(String absolutePath) throws FileNotFoundException, IOException, ParseException, org.json.simple.parser.ParseException {
  
     index=0;
     mydrawingArea.shapes.clear();
    ((DrawingArea)mydrawingArea).repaint();  
     ComboBox.removeAllItems();
     JSONParser parser = new JSONParser();
     Object obj = parser.parse(new FileReader(absolutePath));
     JSONArray shapes = (JSONArray) obj;

     shapes.forEach(b->extract((JSONObject)b));
       
    }
 private void extract(JSONObject b)
 {
    Object shape=b.get("shapetype");
     
  if(shape.equals("rectangle")) 
  {
      int h=Integer.parseInt(b.get("height").toString());
      int w=Integer.parseInt(b.get("width").toString());
      int x=Integer.parseInt(b.get("x").toString());
      int y=Integer.parseInt(b.get("y").toString());
      Point p1=new Point(x,y);
      Rectangle r = new Rectangle (w,h,p1);
      int rgb = Integer.parseInt(b.get("rgb").toString());
      int rgb2 = Integer.parseInt(b.get("rgb2").toString());
      r.setColor(new Color(rgb));
      r.setFillColor(new Color(rgb2));
      addComboCanvas(r,"rectangle");
      
  }
    
   if(shape.equals("oval")) 
  {
      int h=Integer.parseInt(b.get("height").toString());
      int w=Integer.parseInt(b.get("width").toString());
      int x=Integer.parseInt(b.get("x").toString());
      int y=Integer.parseInt(b.get("y").toString());
      Point p1=new Point(x,y);
      Oval r = new Oval(w,h,p1);
      int rgb = Integer.parseInt(b.get("rgb").toString());
      int rgb2 = Integer.parseInt(b.get("rgb2").toString());
      r.setColor(new Color(rgb));
      r.setFillColor(new Color(rgb2));
      addComboCanvas(r,"oval");
  }
   
     if(shape.equals("line")) 
  {
      int x=Integer.parseInt(b.get("x").toString());
      int y=Integer.parseInt(b.get("y").toString());
      Point p1=new Point(x,y);
        
      int x1=Integer.parseInt(b.get("startpoint").toString());
      int y1=Integer.parseInt(b.get("Endpoint").toString());
      Point p2=new Point(x1,y1);
      Line r = new Line (p2,p1);
      int rgb = Integer.parseInt(b.get("rgb").toString());
    
      r.setColor(new Color(rgb));
      
      addComboCanvas(r,"line");
      
  }
     
        if(shape.equals("triangle")) 
  {
     
      JSONObject obj=  (JSONObject)b.get("point1");
      int x1=Integer.parseInt(obj.get("x").toString());
      int y1=Integer.parseInt(obj.get("y").toString());
      Point p1=new Point(x1,y1);
      
       obj=(JSONObject)b.get("point2");
      int x=Integer.parseInt(obj.get("x").toString());
      int y=Integer.parseInt(obj.get("y").toString());
      Point p2=new Point(x,y);
      
      obj=(JSONObject)b.get("point3");
      int x2=Integer.parseInt(obj.get("x").toString());
      int y2=Integer.parseInt(obj.get("y").toString());
      Point p3=new Point(x2,y2);
      
     triangle r = new triangle(p1,p2,p3);
     int rgb = Integer.parseInt(b.get("rgb").toString());
     int rgb2 = Integer.parseInt(b.get("rgb2").toString());
     r.setColor(new Color(rgb));     
     r.setFillColor(new Color(rgb2));
      addComboCanvas(r,"triangle");
      
  }
   
 }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> ComboBox;
    private javax.swing.JButton circle;
    private javax.swing.JButton circlebutton;
    private javax.swing.JButton fill;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private paint.DrawingArea mydrawingArea;
    private javax.swing.JButton rectangle;
    // End of variables declaration//GEN-END:variables
}
