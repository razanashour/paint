/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package paint;

import java.awt.Graphics;
import java.util.ArrayList;
import java.awt.Point;
import javax.swing.SwingUtilities;
/**
 *
 * @author Dell
 */
public class DrawingArea extends javax.swing.JPanel implements DrawingEngine{
    public ArrayList<abs> shapes = new ArrayList<>();
    int selectedIndex = -1;
    boolean resizedIndex=false;
    /**
     * Creates new form DrawingArea
     */
    public DrawingArea() {
        initComponents();
         shapes=new ArrayList(); 
    }
 @Override
    protected void paintComponent(Graphics g) {
          super.paintComponent(g); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        for (int i = 0; i < shapes.size(); i++) {
            shapes.get(i).draw(g);


    }
    }
    @Override
    public void addShape(Shape shape) {
        shapes.add((abs) shape);
    }

    @Override
    public void removeShape(Shape shape) {
        shapes.remove((abs)shape);
    }

    @Override
    public Shape[] getShapes() {
      Shape[]list = new Shape[shapes.size()] ;
      for(int i=0;i<shapes.size();i++)
      {
          list[i]=(Shape)shapes.get(i);
      }
      return list;
     
    }
    @Override
    public void refresh(Graphics canvas) {
        for (int i = 0; i < shapes.size(); i++) {
            shapes.get(i).draw(canvas);
        }  

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        Frame m = (Frame) SwingUtilities.getWindowAncestor(this);
   
        Point p = evt.getPoint();
        if (selectedIndex != -1) {
            Shape s = shapes.get(selectedIndex);
       resizedIndex = false;
            if (s instanceof Rectangle) {
                Rectangle r = (Rectangle) s;
                if (r.ULCorners(p) || r.URCorners(p) || r.LLCorners(p) || r.LRCorners(p)) {
                    r.setDraggingPoint(p);
                    resizedIndex = true;
                    return;
                }
            }
            if (s instanceof Line) {
                Line l = (Line) s;
                if (l.firstpt(p) || l.secondpt(p)) {
                    l.setDraggingPoint(p);
                    resizedIndex = true;
                    return;
                }
            }
             
             
             if (s instanceof Oval) {
               Oval r = (Oval) s;
                if (r.ULCorners(p) || r.URCorners(p) || r.LLCorners(p) || r.LRCorners(p)) {
                    r.setDraggingPoint(p);
                    resizedIndex = true;
                    return;
                }   
             }
                if (s instanceof triangle)
                {
                    triangle l=(triangle)s;
                
                     if (l.firstpt(p) || l.secondpt(p)||l.thirdpt(p)) {
                    l.setDraggingPoint(p);
                    resizedIndex = true;
                    return;
                }
             
        }
        
        }
        if (selectedIndex != -1) {
            shapes.get(selectedIndex).setSelected(false);
            repaint();
        }
        
        for (int i = shapes.size()-1 ; i >= 0; i--) {
            if (shapes.get(i).contains(p)) {
                selectedIndex = i;
                m.setComboBox(i);
                shapes.get(i).setDraggingPoint(p);
                shapes.get(i).setSelected(true);
                repaint();
                return;
            }
        }
        selectedIndex = -1;
        m.setComboBox(-1);
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
          Point p = evt.getPoint();

if (resizedIndex== true) {
            shapes.get(selectedIndex).resize(p);
            shapes.get(selectedIndex).setDraggingPoint(p);
            repaint();
        }
            else if (selectedIndex != -1) {
            shapes.get(selectedIndex).moveTo(p);
            shapes.get(selectedIndex).setDraggingPoint(p);
            repaint();
    }//GEN-LAST:event_formMouseDragged
    }

    @Override
    public void save(String filename) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


